{"version":3,"sources":["assets/loading.gif","components/Footer/Footer.js","components/Card/Card.js","consts/apiUrls.js","components/CardContainer/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","date","Date","getFullYear","Card","props","useState","error","setError","isLoaded","setIsLoaded","tested","setTested","infected","setInfected","deceased","setDeceased","recovered","setRecovered","lastUpdate","setLastUpdate","useEffect","fetch","api","then","res","json","result","lastUpdatedAtSource","country","deaths","totalCases","dischargedHealed","lastUpdatedAtApify","message","className","short","style","color","substr","src","loading","width","height","apiList","CardContainer","console","log","TR_API","UK_API","BE_API","IT_API","GE_API","SP_API","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b247dbc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.77e0faea.gif\";","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    const date = new Date();\r\n    return (\r\n        <div>\r\n            <p>Copyright &copy; {date.getFullYear()} Ersoy Efe Uruk</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport loading from '../../../src/assets/loading.gif';\r\n\r\nexport default function Card(props) {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [tested, setTested] = useState(0);\r\n    const [infected, setInfected] = useState(0);\r\n    const [deceased, setDeceased] = useState(0);\r\n    const [recovered, setRecovered] = useState(0);\r\n    const [lastUpdate, setLastUpdate] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(props.api)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                setIsLoaded(true);\r\n                setTested(result?.tested);\r\n                setInfected(result?.infected);\r\n                setDeceased(result?.deceased);\r\n                setRecovered(result?.recovered);\r\n                setLastUpdate(result?.lastUpdatedAtSource);\r\n                if (props.country === \"Belgium\") {\r\n                    setDeceased(result?.deaths);\r\n                }\r\n                else if (props.country === \"Italy\") {\r\n                    setTested(\"N/A\")\r\n                    setInfected(result?.totalCases);\r\n                    setRecovered(result?.dischargedHealed);\r\n                }\r\n                else if (props.country === \"Spain\" || props.country === \"Germany\") {\r\n                    setLastUpdate(result?.lastUpdatedAtApify);\r\n                }\r\n            },\r\n            (error) => {\r\n                setIsLoaded(true);\r\n                setError(error);\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>\r\n    }\r\n    else if (!isLoaded) {\r\n        return <img src={loading} width=\"10%\" height=\"40%\" />\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"card\">\r\n                <h2 className={props.short}>{props.country}</h2>\r\n                <p>Total tested: {tested}</p>\r\n                <p>Total infected: {infected}</p>\r\n                <p style={{color: '#f23030'}}>Total deceased: {deceased}</p>\r\n                <p style={{color: '#00c91e'}}>Total recovered: {recovered}</p>\r\n                <p>Last Update: {lastUpdate?.substr(0,10)}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","const apiList = {\r\n    \"TR_API\": {\r\n        country: \"Turkey\",\r\n        short: \"TR\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/28ljlt47S5XEd1qIi/records/LATEST\"\r\n    },\r\n    \"UK_API\": {\r\n        country: \"United Kingdom\",\r\n        short: \"UK\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/KWLojgM5r1JmMW4b4/records/LATEST\"\r\n    },\r\n    \"BE_API\": {\r\n        country: \"Belgium\",\r\n        short: \"BE\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/apVM8aZ8hKZFvnKm7/records/LATEST\"\r\n    },\r\n    \"IT_API\": {\r\n        country: \"Italy\",\r\n        short: \"IT\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/UFpnR8mukiu0TSrb4/records/LATEST\"\r\n    },\r\n    \"GE_API\": {\r\n        country: \"Germany\",\r\n        short: \"GE\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/OHrZyNo9BzT6xKMRD/records/LATEST\"\r\n    },\r\n    \"SP_API\": {\r\n        country: \"Spain\",\r\n        short: \"SP\",\r\n        api: \"https://api.apify.com/v2/key-value-stores/lluBbYoQVN65R3BGO/records/LATEST\"\r\n    },\r\n}\r\n\r\nexport default apiList;","import React from 'react'\r\nimport Card from '../Card/Card';\r\nimport apiList from '../../consts/apiUrls'\r\n\r\n\r\nexport default function CardContainer() {\r\n    console.log(apiList);\r\n    return (\r\n    <div className=\"card-container\">\r\n        <Card country={apiList.TR_API.country} short={apiList.TR_API.short} api={apiList.TR_API.api} />\r\n        <Card country={apiList.UK_API.country} short={apiList.UK_API.short} api={apiList.UK_API.api} />\r\n        <Card country={apiList.BE_API.country} short={apiList.BE_API.short} api={apiList.BE_API.api} />\r\n        <Card country={apiList.IT_API.country} short={apiList.IT_API.short} api={apiList.IT_API.api} />\r\n        <Card country={apiList.GE_API.country} short={apiList.GE_API.short} api={apiList.GE_API.api} />\r\n        <Card country={apiList.SP_API.country} short={apiList.SP_API.short} api={apiList.SP_API.api} />\r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Footer from './components/Footer/Footer';\nimport CardContainer from './components/CardContainer/CardContainer';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Total Cases Around the World</h1>\n      <CardContainer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}